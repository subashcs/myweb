{"version":3,"sources":["index.js"],"names":["Square","props","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","onClick","value","Board","i","_this","this","squares","renderSquare","React","Component","Game","_this2","Object","F_Projects_react_projects_myweb_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","F_Projects_react_projects_myweb_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","F_Projects_react_projects_myweb_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","_this3","current","winner","moves","map","move","desc","jumpTo","handleClick","lines","_lines$i","F_Projects_react_projects_myweb_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2b5575ac.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n//class Square extends React.Component {\r\n  /*constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      value: null,\r\n    };\r\n  }\r\n  Now iits not required since we are taking statte value from Board state\r\n  */\r\n\r\n  //lets change square to be function component\r\n  //they only ontain render an d dont have their own state\r\n    //render() {\r\n      function Square(props){\r\n      return (\r\n        <button \r\n              className=\"square\"\r\n              onClick={()=> props.onClick()}\r\n            >\r\n          {/* TODO */\r\n           props.value\r\n          }\r\n        </button>\r\n      );\r\n      }\r\n  //  } closed render\r\n  //}  closed class\r\n  \r\n  class Board extends React.Component {\r\n   /*\r\n    constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        squares:Array(9).fill(null),\r\n        xIsNext: true,\r\n      };\r\n    }\r\n    we dont need this after history and Game constructor\r\n     added\r\n     but see about arrays single and multi dimensional\r\n    */\r\n\r\n    //handle click moved from Board to Game   \r\n\r\n    renderSquare(i) {\r\n      return <Square \r\n                value={this.props.squares[i]}\r\n                onClick={()=>this.props.onClick(i)} \r\n              />;\r\n    }\r\n  \r\n    render() {\r\n     \r\n      return (\r\n        <div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Game extends React.Component {\r\n    constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        history: [{\r\n          squares: Array(9).fill(null), //see multidimenstional array in js react\r\n        }],\r\n        stepNumber: 0,\r\n        xIsNext:true,\r\n      };\r\n    }\r\n\r\n    handleClick(i){\r\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n      const current = history[history.length - 1];\r\n      const squares = current.squares.slice(); //what slice does\r\n     //the slice opetaor creates the copy of the squares array \r\n     // to modify instead of modifying existing array\r\n     //Immutability is important\r\n     //mutate data : means directly changing data value\r\n      if (calculateWinner (squares) || squares[i]){\r\n        return;\r\n      }\r\n      squares[i]= this.state.xIsNext ? 'X' : 'O';\r\n      this.setState({\r\n        history:history.concat([{\r\n        squares: squares,\r\n        }]),\r\n        //unline the array push() concat method doesnt mutate the original array so we use it\r\n        stepNumber: history.length,\r\n        xIsNext:!this.state.xIsNext,               \r\n      });\r\n    } \r\n\r\n    jumpTo(step) {\r\n      this.setState({\r\n        stepNumber: step,\r\n        xIsNext: (step % 2) === 0,\r\n      });\r\n    }\r\n\r\n    render() {\r\n     //use game components render function to use the most \r\n     //recent history and determine and display games status\r\n     const history = this.state.history;\r\n     const current = history[this.state.stepNumber];\r\n     const winner = calculateWinner(current.squares);\r\n     const moves = history.map((step , move)=>{\r\n        const desc = move?\r\n           'Go to move #' + move:\r\n           'Go to game start';\r\n           return (\r\n              <li>\r\n                <button onClick={() => this.jumpTo(move)}> {desc} </button>\r\n              </li>\r\n           );\r\n     });\r\n     let status;\r\n     if (winner) {\r\n       status = 'Winner: ' + winner;\r\n     } else {\r\n       status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n     }   \r\n\r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board \r\n              squares = {current.squares}\r\n              onClick = {(i)=> this.handleClick(i)}\r\n            />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div> {status} </div>\r\n            <ol> {moves} </ol>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  function calculateWinner(squares){\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n\r\n    for (let i=0; i< lines.length; i++){\r\n      const [a, b, c]= lines[i];\r\n      if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c]){\r\n        return squares [a];\r\n      }\r\n    }\r\n  }\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );\r\n  "],"sourceRoot":""}